{"meta":{"title":"LanceBlog","subtitle":"","description":"","author":"Lance","url":"http://example.com","root":"/"},"pages":[{"title":"书单","date":"2021-10-08T08:54:13.643Z","updated":"2021-10-08T07:35:25.283Z","comments":false,"path":"books/index.html","permalink":"http://example.com/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-10-08T08:55:28.609Z","updated":"2021-10-08T07:35:25.283Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2021-10-08T09:41:44.642Z","updated":"2021-10-08T09:41:44.642Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":"https://www.baidu.com"},{"title":"404 Not Found：该页无法显示","date":"2021-10-08T08:55:28.591Z","updated":"2021-10-08T07:35:25.281Z","comments":false,"path":"/404.html","permalink":"http://example.com/404.html","excerpt":"","text":""},{"title":"标签","date":"2021-10-08T08:54:13.624Z","updated":"2021-10-08T07:35:25.285Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-10-08T08:54:15.060Z","updated":"2021-10-08T07:35:25.285Z","comments":false,"path":"repository/index.html","permalink":"http://example.com/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-10-08T08:54:13.635Z","updated":"2021-10-08T07:35:25.284Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"asynq:一个由 Go 开发的轻量级的异步定时任务系统","slug":"asynq:一个由 Go 开发的轻量级的异步定时任务系统","date":"2022-08-23T08:15:31.000Z","updated":"2022-08-23T08:58:56.797Z","comments":true,"path":"2022/08/23/asynq:一个由 Go 开发的轻量级的异步定时任务系统/","link":"","permalink":"http://example.com/2022/08/23/asynq:%E4%B8%80%E4%B8%AA%E7%94%B1%20Go%20%E5%BC%80%E5%8F%91%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E5%BC%82%E6%AD%A5%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"1 安装12go get -u github.com/hibiken/asynqgo get -u github.com/hibiken/asynq/tools/asynqmon 2.使用producer.go将创建并定时要由consumer异步处理的任务。 1234567891011121314151617181920212223242526// 创建asynq连接redis func AsynqServer() &#123; global.AsynqRedis = asynq.NewServer(asynq.RedisClientOpt&#123; Addr: youraddr, Password: yourpassward, // no password set DB: yourdb, // use default DB &#125;, asynq.Config&#123; Concurrency: 50, // 并发树 Queues: map[string]int&#123; &quot;task_queue&quot;: 1, // 队列分配处理时间，此处我只用了一个 &#125;, RetryDelayFunc: func(n int, e error, t *asynq.Task) time.Duration &#123; return 5 * time.Second // 间隔5秒重试 &#125;&#125;)&#125;func AsyncConsumer() &#123; mux := asynq.NewServeMux() mux.HandleFunc(&quot;task_queue&quot;, HandleFraud) // HandleFraud 处理任务队列函数 if err := global.AsynqRedis.Run(mux); err != nil &#123; fmt.Println(&quot;启动正常规则流任务失败&quot;) &#125; fmt.Println(&quot;启动正常规则流任务成功&quot;)&#125; consumer.go 将处理producer创建的任务。 123456789101112//// 即时消费func Test_Enqueue(t *testing.T) &#123; payload, _ := json.Marshal(map[string]interface&#123;&#125;&#123;&quot;uniq_id&quot;: &quot;123456&quot;, &quot;policy_name&quot;: &quot;xw&quot;&#125;) task := asynq.NewTask(&quot;risk:xw:task_queue&quot;, payload, asynq.Retention(3*time.Hour), asynq.MaxRetry(20), asynq.TaskID(&quot;1111&quot;)) // type: risk:xw:task_queue asynq.Retention(3*time.Hour) 结果留存3个小时 asynq.MaxRetry(20) 重试次数20 asynq.TaskID(&quot;1111&quot;) 自定义任务ID res, err := c.Enqueue(task, asynq.Queue(&quot;risk:xw:task_queue&quot;)) if err != nil &#123; t.Errorf(&quot;could not enqueue task: %v&quot;, err) t.FailNow() &#125; fmt.Printf(&quot;Enqueued Result: %+v\\n&quot;, res)&#125; 3.asynqmon 监控3.1安装在github https://github.com/hibiken/asynqmon3.2 使用1asynqmon stats 你应该能看到，有一个任务Enqueued状态，另一个在Scheduled状态。 注意：如需了解每种状态的含义，请参阅Wiki页面上Life of Task。 让我们运行asynqmon与watch命令，以便我们能够连续运行的命令看到的变化。 1watch -n 3 asynqmon stats # Runs `asynqmon stats` every 3 seconds 详情请参考：Asyqn-https://github.com/hibiken/asynq","categories":[{"name":"go","slug":"go","permalink":"http://example.com/categories/go/"}],"tags":[{"name":"asynq","slug":"asynq","permalink":"http://example.com/tags/asynq/"}]},{"title":"1.删除排序数组中的重复项","slug":"1.删除排序数组中的重复项","date":"2022-03-23T03:01:32.000Z","updated":"2022-08-23T09:03:31.671Z","comments":true,"path":"2022/03/23/1.删除排序数组中的重复项/","link":"","permalink":"http://example.com/2022/03/23/1.%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","excerpt":"","text":"1.删除排序数组中的重复项给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。 由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。 将最终结果插入 nums x的前 k 个位置后返回 k 。 不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 判题标准: 系统会用下面的代码来测试你的题解: 123456789int[] nums = [...]; // 输入数组int[] expectedNums = [...]; // 长度正确的期望答案int k = removeDuplicates(nums); // 调用assert k == expectedNums.length;for (int i = 0; i &lt; k; i++) &#123; assert nums[i] == expectedNums[i];&#125; 如果所有断言都通过，那么您的题解将被 通过。 示例 1： 123输入：nums = [1,1,2]输出：2, nums = [1,2,_]解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。 示例 2： 123输入：nums = [0,0,1,1,1,2,2,3,3,4]输出：5, nums = [0,1,2,3,4]解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。 题解 12345678910class Solution(object): def removeDuplicates(self, nums): &quot;&quot;&quot; :type nums: List[int] :rtype: int &quot;&quot;&quot; for i in range(len(nums)-1,0,-1): if nums[i] == nums[i-1]: del nums[i] return len(nums)","categories":[{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"初级算法","slug":"初级算法","permalink":"http://example.com/tags/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/"}]},{"title":"gunicorn版本问题导致服务异常","slug":"gunicorn版本问题导致服务异常","date":"2020-09-05T02:25:40.000Z","updated":"2021-12-03T08:57:50.000Z","comments":true,"path":"2020/09/05/gunicorn版本问题导致服务异常/","link":"","permalink":"http://example.com/2020/09/05/gunicorn%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E6%9C%8D%E5%8A%A1%E5%BC%82%E5%B8%B8/","excerpt":"","text":"gunicorn 19.9版本的代码放到19.7.1中遇到的问题gunicorn/app/wsgiapp.py gunicorn/app/base.py 项目目录结构如下 1234567891011121314151617181920212223242526272829303132333435363738-project_name 项目名称 -script 脚本目录 -gunicorn_config.py gunicorn 配置文件 -start.sh 启动脚本 -src 源代码 -xxxxxxxx -app.py app文件 # gunicorn 配置文件....script_path = os.path.dirname(os.path.abspath(__file__))work_path = os.path.dirname(script_path)pidfile = &#x27;&#123;&#125;/gunicorn.pid&#x27;.format(script_path)errorlog = &#x27;&#123;&#125;/log/gunicorn_error.log&#x27;.format(work_path)chdir = &#x27;&#123;&#125;/src&#x27;.format(work_path)....# start.shCONFIG_PATH=$BASE_DIR/script/gunicorn_config.pyCMD=&quot;gunicorn --daemon -c $CONFIG_PATH app:myapp&quot;# 结合到gunicorn文件改动，当前这个配置在19.7.1版本上是先进行的根目录设置，然后去进行导包，那么就会出现在src目录中导包出现（from src.xxxx import xxx）无法找到src,此时默认会找src下的src,从而导致服务无法运行，那么修改方式如下# gunicorn 配置文件....script_path = os.path.dirname(os.path.abspath(__file__))work_path = os.path.dirname(script_path)pidfile = &#x27;&#123;&#125;/gunicorn.pid&#x27;.format(script_path)errorlog = &#x27;&#123;&#125;/log/gunicorn_error.log&#x27;.format(work_path)#chdir = &#x27;&#123;&#125;/src&#x27;.format(work_path)....# start.shCONFIG_PATH=$BASE_DIR/script/gunicorn_config.pyCMD=&quot;gunicorn --daemon -c $CONFIG_PATH src.app:myapp&quot; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990rule_ocr_datarule_extend_loanrule_recommendrule_relation_network_datarule_relation_address_variable_datarule_txl_datarule_app_datarule_package_price_datadecision_xjd_zd5 rule_a_zd / 4 通过 rule_annual_pay_data rule_c_zd / rule_t_zd rule_access_zd rule_relation_network_zd rule_xd_zd rule_tx_zd rule_zx_zd rule_ed_zd rule_baihang_credit_zd rule_br_zd rule_hujin_zd rule_xinyan_zd rule_no_credit_score_zd rule_court_zd rule_tdrh_zd rule_xd_money_zd rule_b_zd rule_f_zd rule_faceverify_zd rule_tuzhi_zd rule_ylzc rule_dzx_zd rule_main_model_zd rule_score_zd rule_ph_type_price_zd rule_zxsj_zd rule_tcsj_zd 1 rule_annual_pay_data // 2456 rule_amount rule_a // rule_classify rule_c// rule_automate rule_t// rule_rateclass rule_access// rule_user_level rule_gf// rule_qyed_apr36 rule_relation_network// rule_attach_info rule_xd // rule_name // rule_zx // rule_ed // rule_baihang_credit // rule_br // rule_hujin // rule_xinyan // rule_no_credit_score // rule_court // rule_py // rule_access_money // rule_xd_money // rule_tx_money // rule_zx_money // rule_hujin_operator // rule_td // rule_tdrh // rule_td_money // rule_b // rule_f // rule_faceverify // rule_tuzhi // rule_zhitongche // rule_ylzc // rule_dzx // rule_main_model // rule_score // rule_tuzhi_score // rule_td_score // rule_xd_score // rule_hujin_score // rule_tx_score // rule_zx_score // rule_ocr_score // rule_ph_type_price // rule_zxsj // rule_tcsj // rule_dhb_model_yidong // rule_amount // rule_classify // rule_user_level // rule_qyed_apr36 // rule_attach_info //","categories":[{"name":"web相关","slug":"web相关","permalink":"http://example.com/categories/web%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"gunicorn","slug":"gunicorn","permalink":"http://example.com/tags/gunicorn/"}]}],"categories":[{"name":"go","slug":"go","permalink":"http://example.com/categories/go/"},{"name":"算法","slug":"算法","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95/"},{"name":"web相关","slug":"web相关","permalink":"http://example.com/categories/web%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"asynq","slug":"asynq","permalink":"http://example.com/tags/asynq/"},{"name":"初级算法","slug":"初级算法","permalink":"http://example.com/tags/%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/"},{"name":"gunicorn","slug":"gunicorn","permalink":"http://example.com/tags/gunicorn/"}]}